package com.searchengine;

import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.xml.XMLConstants;
import javax.xml.stream.*;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;

public class Main {
    public static void main(String[] args) {
        long i = 0;
        String id = "";
        String title = "";
        boolean insideRevision = false;
        try {
//            System.setProperty("jdk.xml.totalEntitySizeLimit", "0");
//            Path path = Paths.get("ressources/frwiki-20230301-pages-articles.xml");
//            Path path = Paths.get("src/com/searchengine/frwiki10000.xml");
            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
            xmlInputFactory.setProperty("jdk.xml.totalEntitySizeLimit", "0");

            // very powerful to use BufferedWriter and very performant
            FileReader fileReader = new FileReader("ressources/frwiki10000.xml");
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(bufferedReader);// we can use instead new FileInputStream(path.toFile() but not very powerful and its slow

            // very powerful to use BufferedWriter and very performant
            FileWriter fileWriter = new FileWriter("ressources/corpus.xml");
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            XMLOutputFactory factory = XMLOutputFactory.newInstance();
            XMLStreamWriter writer = factory.createXMLStreamWriter(bufferedWriter); // we can use instead new FileOutputStream("ressources/corpus.xml") but not very powerful and its slow

            writer.writeStartElement("mediawiki");
            writer.writeAttribute("xmlns",  "http://www.mediawiki.org/xml/export-0.10/");
            writer.writeAttribute("xmlns", "", "xsi", "http://www.w3.org/2001/XMLSchema-instance");
            writer.writeAttribute("xsi", "", "schemaLocation", "http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd");
            writer.writeAttribute("version","0.10");
            writer.writeAttribute("xml", "", "lang", "fr");

            while (reader.hasNext()) {
                XMLEvent nextEvent = reader.nextEvent();
                if (nextEvent.isStartElement()) {
                    StartElement startElement = nextEvent.asStartElement();
                    if (startElement.getName().getLocalPart().equals("id")) {
                        id = reader.getElementText();
                    }

                    if (startElement.getName().getLocalPart().equals("title")) {
                        title = reader.getElementText();
                    }

                    if (startElement.getName().getLocalPart().equals("text")) {
                            String text = reader.getElementText();
                            if (text.toLowerCase().contains("science")) {
                                text = cleanText(text);
                                if (!(countWordsUsingStringTokenizer(text) < 1000)) {
                                    writer.writeStartElement("page");
                                        writer.writeStartElement("id");
                                            writer.writeCharacters(id);
                                        writer.writeEndElement();
                                        writer.writeStartElement("title");
                                            writer.writeCharacters(title);
                                        writer.writeEndElement();
                                        writer.writeStartElement("text");

//                                            char[] buffer = new char[4096];
//                                            int offset = 0;
//                                            while (offset < text.length()) {
//                                                int len = Math.min(buffer.length, text.length() - offset);
//                                                text.getChars(offset, offset + len, buffer, 0);
//                                                writer.writeCharacters(buffer, 0, len);
//                                                offset += len;
//                                            }

//                                            writer.writeCharacters(text);
                                        writer.writeEndElement();
                                    writer.writeEndElement();
                                }
                                System.out.println(i);
                                i++;
                            }
                    }
                }
            }
            writer.writeEndElement();
        } catch(Exception e){
            e.printStackTrace();
        }
    }

    public static String deleteNestedWithRecursionRegex(String text, String pattern) {
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(text);
//        System.out.println(m.find()); // if you call find() 2 times it will start from the last find and try to find the next its like next()
        if (m.find()) {
            text = text.replaceAll(pattern, "");
            text = deleteNestedWithRecursionRegex(text, pattern);
        }

        return text;
    }

    public static int countWordsUsingStringTokenizer(String sentence) {
        if (sentence == null || sentence.isEmpty()) { return 0; }
        StringTokenizer tokens = new StringTokenizer(sentence); return tokens.countTokens();
    }

    public static String cleanText(String text) {
//        text = text.replaceAll("(?s)\\{\\{[^\\}]*?\\{\\{.*?\\}\\}.*?\\}\\}", "");
        text = deleteNestedWithRecursionRegex(text, "(?s)\\{\\{[^\\{]*?\\}\\}");
        text = text.replaceAll("\\[\\[[^\\]]*?:.*?\\]\\]", "");
        text = text.replaceAll("(?s)\\<.*?\\>", ""); // dot all (?s)
        text = text.replaceAll("(?s)==\\s*Notes et références\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Voir aussi\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Bibliographie\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Liens externes\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Articles connexes\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Sources\\s*==.*", "");
        text = text.replaceAll("(?s)==\\s*Références\\s*==.*", "");
//        text = text.replaceAll("[^\s]*'", ""); // j' l'
        text = text.toLowerCase();
        text = text.replaceAll("[\n]{2,}", "\n");
        text = text.trim().replaceAll("[ ]{2,}", " ");

        return text;
    }
}
